{
	"info": {
		"_postman_id": "a04efdc3-4802-42a3-a408-fc7cd4b97d5e",
		"name": "HW_2 Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17921094"
	},
	"item": [
		{
			"name": "First",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first?name=Anna&age=40&salary=2000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					],
					"query": [
						{
							"key": "name",
							"value": "Anna"
						},
						{
							"key": "age",
							"value": "40"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "User_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let resp_data = pm.response.json()\r",
							"\r",
							"// 4. Спарсить request.\r",
							" let req_data = request.data\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"name\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    let name = jsonData.name\r",
							"    console.log(name)\r",
							"});\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"salary\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    let salary = jsonData.salary\r",
							"    console.log(salary)\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"age\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    let age = jsonData.age\r",
							"    console.log(age)\r",
							"});\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"pm.test(\"family\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    let family = jsonData.family\r",
							"\r",
							"    console.log(family)\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Anna",
							"type": "text"
						},
						{
							"key": "age",
							"value": "35",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "Object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// //3. Спарсить response body в json \r",
							"let resp_data = pm.response.json()\r",
							"\r",
							"//   4. Спарсить request.\r",
							" let req_data = request.data\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let req_name = req_data.name\r",
							"pm.test(\"verify name from request\", function () {\r",
							"        pm.expect(resp_data.name).to.eql(req_name);     \r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"let req_age = req_data.age\r",
							"pm.test(\"verify age from request\", function () {\r",
							"        pm.expect(resp_data.age).to.eql(req_age);     \r",
							"});\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let req_salary = req_data.salary\r",
							"pm.test(\"verify salary from request\", function () {\r",
							"        pm.expect(resp_data.salary).to.eql(2000)   \r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"\r",
							"    let jsonData = pm.response.json();\r",
							"    let family = jsonData.family;\r",
							"    console.log(family)\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"dog name\", function () {\r",
							"    let name = jsonData.family.pets.dog.name;\r",
							"});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"dog age\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    let age = jsonData.family.pets.dog.age;\r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"check dog name\", function () {\r",
							"    let name = jsonData.family.pets.dog.name;\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\");\r",
							"    console.log(name)\r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"check dog age\", function () {\r",
							"    let age = jsonData.family.pets.dog.age;\r",
							"pm.expect(jsonData.family.pets.dog.age).to.eql(4);   \r",
							"    console.log(age)\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Anna",
							"type": "text"
						},
						{
							"key": "age",
							"value": "41",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Anna&age=41&salary=2000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Anna"
						},
						{
							"key": "age",
							"value": "41"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Object_info_4",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// // //3. Спарсить response body в json \r",
							"let resp_data = pm.response.json()\r",
							"\r",
							"// //   4. Спарсить request.\r",
							" let req_data = request.data\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let name = req_data.name\r",
							"pm.test(\"verify name from request\", function () {\r",
							"        pm.expect(resp_data.name).to.eql(name);     \r",
							"});\r",
							"\r",
							"// // 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"let age = parseInt(req_data.age)\r",
							"pm.test(\"verify age from request\", function () {\r",
							"    console.log(resp_data.age)\r",
							"        pm.expect(resp_data.age).to.eql(age);     \r",
							"});\r",
							"\r",
							"// // 7. Вывести в консоль параметр salary из request.\r",
							"let salary = parseInt(req_data.salary)\r",
							"console.log(salary);\r",
							"\r",
							"// // 8. Вывести в консоль параметр salary из response.\r",
							"pm.test(\"salary\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    let salary = jsonData.salary;\r",
							"    console.log(salary)\r",
							"})\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"let jsonData = pm.response.json();\r",
							"let salary_0= jsonData.salary[0]\r",
							"console.log(salary_0)\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"let salary_1=  jsonData.salary[1]\r",
							"console.log(salary_1)\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"let salary_2= jsonData.salary[2]\r",
							"console.log(salary_2)\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check salary_0\", function () {\r",
							"pm.expect(jsonData.salary[0]).to.eql(salary);\r",
							"});\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check salary_1\", function () {\r",
							"pm.expect(parseInt(jsonData.salary[1])).to.eql(salary*2);\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Check salary_2\", function () {\r",
							"pm.expect(parseInt(jsonData.salary[2])).to.eql(salary*3);\r",
							"});\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", \"Anna\");\r",
							"\r",
							"// 16. Создать в окружении переменную age\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", \"41\");\r",
							"\r",
							"// 17. Создать в окружении переменную salary\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", \"2000\");\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"let iterable = [salary, salary_1, salary_2];\r",
							"for (const salary of iterable) {\r",
							"  console.log(salary);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Anna",
							"type": "text"
						},
						{
							"key": "age",
							"value": "41",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Anna&age=41&salary=2000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Anna"
						},
						{
							"key": "age",
							"value": "41"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "User_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							" //6. Спарсить response body в json \r",
							"let resp_data = pm.response.json()\r",
							"\r",
							"// 7. Спарсить request.\r",
							" let req_data = request.data\r",
							"\r",
							"//  8. Проверить, что json response имеет параметр start_qa_salary\r",
							"    pm.test(\"Check parametr start_qa_salary\", function () {\r",
							"        let jsonData = pm.response.json();\r",
							"        pm.expect(jsonData).to.have.property(\"start_qa_salary\");\r",
							"    });\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"\r",
							"pm.test(\"Check parametr qa_salary_after_6_months\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"  \r",
							"//   10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Check parametr qa_salary_after_12_months\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Check parametr qa_salary_after_1,5_year\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Check parametr qa_salary_after_3,5_year\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Check parametr person\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"let start_qa_salary = req_data.salary\r",
							"pm.test(\"verify salary from request\", function () {\r",
							"    pm.expect(resp_data.start_qa_salary).to.eql(parseInt(req_data.salary));     \r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"let qa_salary_after_6_months = req_data.salary*2\r",
							"pm.test(\"Check qa_salary_after_6_months = salary*2\", function () {\r",
							"    pm.expect(resp_data.qa_salary_after_6_months).to.eql(parseInt(req_data.salary*2));     \r",
							"});\r",
							"console.log(qa_salary_after_6_months)\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"let qa_salary_after_12_months = req_data.salary*2.7\r",
							"pm.test(\"Check qa_salary_after_12_months = salary*2.7\", function () {\r",
							"    pm.expect(resp_data.qa_salary_after_12_months).to.eql(parseInt(req_data.salary*2.7));     \r",
							"});\r",
							"console.log(qa_salary_after_12_months)\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Check qa_salary_after_1.5_year = salary*3.3\", function () {\r",
							"    pm.expect(resp_data[\"qa_salary_after_1.5_year\"]).to.eql(parseInt(req_data.salary*3.3));    \r",
							"});\r",
							"console.log(resp_data[\"qa_salary_after_1.5_year\"])\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_3.5_years = salary*3.8\", function () {\r",
							"    pm.expect(resp_data[\"qa_salary_after_3.5_years\"]).to.eql(parseInt(req_data.salary*3.8));    \r",
							"});\r",
							"console.log(resp_data[\"qa_salary_after_3.5_years\"])\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check person.u_name[1] = req_data.salary\", function () {\r",
							"    pm.expect(resp_data.person.u_name[1]).to.eql(parseInt(req_data.salary));\r",
							"});\r",
							"console.log(resp_data.person.u_name[1])\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Check u_age = req_data.age\", function () {\r",
							"    pm.expect(resp_data.person.u_age).to.eql(parseInt(req_data.age));\r",
							"});\r",
							"console.log(resp_data.person.u_age)\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)   \r",
							"pm.test(\"Check u_salary_5_years = salary*4.2\", function () {\r",
							"    pm.expect(resp_data.person.u_salary_5_years).to.eql(parseInt(req_data.salary*4.2));\r",
							"});\r",
							"console.log(resp_data.person.u_salary_5_years)\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"let jsonData = pm.response.json()\r",
							"for (i in jsonData.person) {\r",
							"console.log(jsonData.person[i])\r",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Anna",
							"type": "text"
						},
						{
							"key": "age",
							"value": "41",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2?name={{name}}&age={{age}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		}
	]
}